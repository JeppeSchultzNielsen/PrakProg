Calculating some test integrals with plain Monte Carlo integrator with 1000 points: 
Int( r^2sin(theta) ) with r from 0 to 1 and theta from 0 to 2pi is calculated as: 0.669766750184308 +- 0.0236127824095824
It should be 1/(2pi) * 4/3 * pi * 1^3 = 2/3 = 0.666666666666667
Int( e^(x^2+y^2) ) with x from 0 to 1 and y from 0 to 1 is calculated as: 0.558617613798958 +- 0.00679698875923349
It should be 0.557746
Int( 1/pi^3 * 1 / (1 - cos(x)*cos(y)*cos(z) ) ) with all limits from 0 to pi is calculated as: 1.2891786451178 +- 0.0361802513374283
It should be 1.393203929685676

Calculating some test integrals with plain Monte Carlo integrator with 100000 points: 
Int( r^2sin(theta) ) with r from 0 to 1 and theta from 0 to 2pi is calculated as: 0.66598745656264 +- 0.00232559181968105
It should be 1/(2pi) * 4/3 * pi * 1^3 = 2/3 = 0.666666666666667
Int( e^(x^2+y^2) ) with x from 0 to 1 and y from 0 to 1 is calculated as: 0.558827633470328 +- 0.000683764905306823
It should be 0.557746
Int( 1/pi^3 * 1 / (1 - cos(x)*cos(y)*cos(z) ) ) with all limits from 0 to pi is calculated as: 1.36684688300948 +- 0.0149742941885003
It should be 1.393203929685676

Now instead of sampling completely random, I will sample using quasirandom numbers from Halton sequences.
I will estimate the error by comparing the result with sampling from Halton sequences in a different bases.
Hopefully this will decrease the discrepancy and the integral should converge faster.

Calculating some test integrals with Halton Monte Carlo integrator with 1000 points: 
Int( r^2sin(theta) ) with r from 0 to 1 and theta from 0 to 2pi is calculated as: 0.66353704457738 +- 0.057998679653891
It should be 1/(2pi) * 4/3 * pi * 1^3 = 2/3 = 0.666666666666667
Int( e^(x^2+y^2) ) with x from 0 to 1 and y from 0 to 1 is calculated as: 0.559054569653787 +- 0.00967454203449924
It should be 0.557746

Calculating some test integrals with Halton Monte Carlo integrator with 100000 points: 
Int( r^2sin(theta) ) with r from 0 to 1 and theta from 0 to 2pi is calculated as: 0.66662766710737 +- 0.000491987019027196
It should be 1/(2pi) * 4/3 * pi * 1^3 = 2/3 = 0.666666666666667
Int( e^(x^2+y^2) ) with x from 0 to 1 and y from 0 to 1 is calculated as: 0.557769864238247 +- 0.000145069720089652
It should be 0.557746

Using the Halton sequence seems to allow much faster convergence than plain Monte Carlo;
In plain Monte Carlo, going from 1k to 100k samples improved precision by a factor 10, with Halton sequence its almost a factor 100.

Now I will solve the integrals with stratified sampling.
Integrating a circle of radius 1 and height 1 with stratified sampling with x and y from 0 to 1 is calculated as: 0.746943905354919 +- NaN with 100000 points
Integrating a circle of radius 1 and height 1 with plain sampling with x and y from 0 to 1 is calculated as: 0.78721 +- 0.00129425815006126 with 100000 points
Integrating a circle of radius 1 and height 1 with stratified sampling with x and y from 0 to 1 is calculated as: 0.785490878166732 +- 9.21838716708497E-05 with 1e6 points
Integrating a circle of radius 1 and height 1 with plain sampling with x and y from 0 to 1 is calculated as: 0.785335 +- 0.000410589743874588 with 1e6 points
It should be pi/4, 0.785398163397448
A comparison of convergence has been saved to a plot.
