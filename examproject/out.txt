-----
Part a)
Unless otherwise stated, the absolute and relative accuracy goal is 1e-5.
Testing integrator...

Integrating f(x,y)=1 with x in (-5,5) and y in (-5,5) gives result 99.9999999505249, it should be 100

Integrating f(x,y)=x*y*y with x in (0,2) and y in (0,1) gives result 0.666665757093304, it should be (1/2*2^2)*(1/3*1^3)=2/3

Integrating f(x,y)=x*y*y with x in (-PI,PI) and y in (-PI,PI) gives result 6.65900587168905. According to WolframAlpha, it should be Si(pi^2)=6.659

Since the implementation made in the homework allows infinite limits, we can also test if this works in 2d.
Integrating f(x,y)=Exp(-x*x-y*y) with x in (-inf,inf) and y in (-inf,inf) gives result 3.14157449025866, it should be pi.

-----
Part b)
Testing integrator...
Integrating f(x,y)=1 with x in (-1,1) and y in (-Sqrt(1-x*x),Sqrt(1-x*x)) (a circle of radius 1) gives result 3.14159264373295
In polar coordinates this can be restated as a rectangular integral with x->cos(v), y->sin(v), dxdy -> rdrdv, v in (0,2pi) and r in (0,1).
This then gives 3.14159265901456

Integrating f(x,y)=x*y with x in (-1,1) and y in (-Sqrt(1-x*x),Sqrt(1-x*x)) (a circle of radius 1) gives result 0
The same integral in polar coordinates is ∫∫r²sin(v)cos(v)rdrdv. This gives -2.56428622898208E-16

Integrating f(x,y)=Exp(x)*Exp(y) with x in (-1,1) and y in (-Sqrt(1-x*x),Sqrt(1-x*x)) (a circle of radius 1) gives result 3.99523816313921
The same integral in polar coordinates is ∫∫exp( r*(sin(v)cos(v)) )rdrdv. This gives 3.99526277913674

We can also test this with infinite boundaries on x.
Integrating f(x,y)=Exp(-x*x-y*y) with x in (-inf,inf) and y in (-Exp(-x*x),Exp(x*x)) gives result 2.03519769912845, according to WolframAlpha it is 2.03519

-----
Part c)
The Halton-sequence integrator of homework 7 has been extended to take arguments similar to the adaptive 2d integrator.
The code is heavily inspired by that of homework 7.
The size of the sampling box is given by the user.

Points will be sampled within the box. If they are not within the integration boundary, they are discarded.
Testing this with the integral f(x,y)=Exp(x)*Exp(y) with x in (-1,1) and y in (-Sqrt(1-x*x),Sqrt(1-x*x)) (a circle of radius 1) with 10k points
The result is 3.989797052837+-0.0137024905648326, with 15732 calls to f. The boundary functions have each been evaluated 20k times (once for each Halton-series -- two are used when estimating the error).

Now, an implementation must be made which can calculate the error.
The transformation ∫_a ^b dx ∫_d(x) ^u(x) dy f(x,y) -> ∫_a ^b dx g(x) with g(x) = ∫_d(x) ^u(x) dy f(x,y) is not a full analogy when calculating the error.
This is due to the fact that g(x) also comes with an error from the 1d-integrator.
Therefore I extend the calculation of error to include this error using standard error propagation.
I define the error in the calculation as Abs(q-Q)+Sqrt(q_err^2+Q_err^2) where Q is the higher order rule and q is the lower order rule.
This should calculate the worst case error. This changes the convergence slightly because the term Sqrt(q_err^2+Q_err^2) was ignored earlier.

Integrating f(x,y)=Exp(x)*Exp(y) with x in (-1,1) and y in (-Sqrt(1-x*x),Sqrt(1-x*x)) (a circle of radius 1) gives result 3.99524093402559+-9.10455949746159E-05
Here we had 2*47888 calls to f, and 460 calls to each boundary condition.

With the old convergence we get result 3.99523816313921 after 2*48322 calls to f, and 476 calls to each boundary condition.

We are now in a position to compare the precision for a given number of function calls in Monte Carlo 2D integration and adaptive 2D integration.
To examine this, I integrate an arbitrary polynomium (2x^2+6*x^4-7)(9y+7y^3+6) over a circle of radius 1.
The adaptive integrator gives -108.384343328873+-0.0009019220620568 for this, and the quasi random Monte Carlo integrator gives -108.403908101211+-1.027614134036. They agree within the error.
Calculating the integral with different precisions in adaptive integrator...
Calculating the integral with different number of samples in MC integrator...
Plots have been made comparing the convergence of the two methods in the plots directory.
